{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/ccwc-fpv-video.es6","src/shaders.es6"],"names":[],"mappings":"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","file":"ccwc-fpv-video.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Shaders from './shaders.es6';\n\nexport default class extends HTMLElement {\n    /**\n     * initialize default class properties\n     * @private\n     */\n    setProperties() {\n        /**\n         * left eye source\n         * @type {string}\n         * @private\n         */\n        this._leftSource = '';\n\n        /**\n         * right eye source\n         * @type {string}\n         * @private\n         */\n        this._rightSource = '';\n\n        /**\n         * single source to double for both eyes\n         * @type {string}\n         * @private\n         */\n        this._doubleSource = '';\n\n        /**\n         * use camera\n         * @type {boolean}\n         * @private\n         */\n        this._useCamera = false;\n\n        /**\n         * click to view full screen\n         * @type {boolean}\n         * @default false\n         */\n        this._clickToViewFullScreen = false;\n\n        /**\n         * use oculus rift style barrel effect to even out lens distortion\n         * @type {boolean}\n         * @default false\n         */\n        this._useRiftEffect = false;\n\n        /**\n         * refresh interval when using the canvas for display\n         * @type {int}\n         * @default 0 ms\n         */\n        this.canvasRefreshInterval = 0;\n    };\n\n    /**\n     * set video source\n     * @param {string | int} src video source uri\n     */\n    set source(src) {\n        if (!src) { return; }\n        this._doubleSource = src;\n        this.dom.leftVideo._useCamera = this._useCamera;\n        this.dom.leftVideo.source = src;\n\n        //this.dom.rightVideo.style.display = 'none';\n        this.dom.leftVideo.addEventListener('frameupdate', event => this.syncRighttoLeft(event));\n        this.dom.leftVideo.addEventListener('webglsetup', event => this.setupUniforms('left'));\n    }\n\n    /**\n     * setup vertex and fragment shaders for one, two, or both eyes\n     * @param eye todo: implement separate shaders for each eye when we have multiple sources\n     */\n    setupShaders(eye) {\n        if (this._useRiftEffect) {\n            this.dom.leftVideo.webglProperties.vertexShader = Shaders.riftshader.vertex;\n            this.dom.leftVideo.webglProperties.fragmentShader = Shaders.riftshader.fragment;\n        }\n    }\n\n    /**\n     * setup vertex and fragment shaders for one, two, or both eyes\n     * @param eye todo: implement separate shaders for each eye when we have multiple sources\n     */\n    setupUniforms(eye) {\n        if (this._useRiftEffect) {\n            var HMD = {\n                hResolution: 1280,\n                vResolution: 800,\n                hScreenSize: 0.14976,\n                vScreenSize: 0.0936,\n                interpupillaryDistance: 0.064,\n                lensSeparationDistance: 0.064,\n                eyeToScreenDistance: 0.041,\n                distortionK : [1.0, 0.22, 0.24, 0.0],\n                chromaAbParameter: [ 0.996, -0.004, 1.014, 0.0]\n            };\n\n            var aspect = HMD.hResolution / (2 * HMD.vResolution);\n            var r = -1.0 - (4 * (HMD.hScreenSize / 4 - HMD.lensSeparationDistance / 2) / HMD.hScreenSize);\n            var distScale = (HMD.distortionK[0] + HMD.distortionK[1] * Math.pow(r, 2) + HMD.distortionK[2] * Math.pow(r, 4) + HMD.distortionK[3] * Math.pow(r, 6));\n            this.dom.leftVideo.webglProperties.renderobj.uniforms.add('hmdWarpParam', '4f', [HMD.distortionK[0], HMD.distortionK[1], HMD.distortionK[2], HMD.distortionK[3]]);\n            this.dom.leftVideo.webglProperties.renderobj.uniforms.add('chromAbParam', '4f', [HMD.chromaAbParameter[0], HMD.chromaAbParameter[1], HMD.chromaAbParameter[2], HMD.chromaAbParameter[3]]);\n            this.dom.leftVideo.webglProperties.renderobj.uniforms.add('scaleIn', '2f', [1.0, 1.0 / aspect]);\n            this.dom.leftVideo.webglProperties.renderobj.uniforms.add('scale', '2f', [1.0 / distScale, 1.0 * aspect / distScale]);\n            this.dom.leftVideo.webglProperties.renderobj.uniforms.add('lensCenter', '2f', [0.0, 0.0]);\n            this.dom.leftVideo.webglProperties.renderobj.textures.add('texid', this.dom.leftVideo.videoElement);\n        }\n    }\n    /**\n     * parse attributes on element\n     * @private\n     */\n    parseAttributes() {\n        if (this.hasAttribute('leftSrc')) {\n            this._leftSource = this.getAttribute('leftSrc');\n        }\n\n        if (this.hasAttribute('rightSrc')) {\n            this._rightSource = this.getAttribute('rightSrc');\n        }\n\n        if (this.hasAttribute('src')) {\n            this._doubleSource = this.getAttribute('src');\n        }\n\n        if (this.hasAttribute('useCamera') || this.hasAttribute('usecamera')) {\n            this._useCamera = true;\n        } else {\n            this._useCamera = false;\n        }\n\n        if (this.hasAttribute('clickToViewFullScreen')) {\n            this._clickToViewFullScreen = true;\n        }\n\n        if (this.hasAttribute('useRiftEffect') || this.hasAttribute('userifteffect')) {\n            this._useRiftEffect = true;\n        }\n\n        if (this.hasAttribute('canvasRefreshInterval')) {\n            this.canvasRefreshInterval = this.getAttribute('canvasRefreshInterval');\n        }\n    };\n\n    /**\n     * element attached callback\n     * @private\n     */\n    attachedCallback() {\n        this.root = this.createShadowRoot();\n        let template = this.owner.querySelector(\"template\");\n        let clone = document.importNode(template.content, true);\n        this.root.appendChild(clone);\n\n        this.dom = {};\n        this.dom.leftVideo = this.root.querySelector('ccwc-video.left');\n        this.dom.rightVideo = this.root.querySelector('ccwc-video.right');\n        this.dom.rightCanvas = this.root.querySelector('canvas.right');\n        this.dom.rightCanvasContext = this.dom.rightCanvas.getContext('2d');\n\n        if (this._doubleSource !== '') {\n            this.source = this._doubleSource;\n        }\n\n        if (this._clickToViewFullScreen) {\n            this.root.addEventListener('click', event => {\n                if(this.requestFullscreen) {\n                    this.requestFullscreen();\n                } else if(this.mozRequestFullScreen) {\n                    this.mozRequestFullScreen();\n                } else if(this.webkitRequestFullscreen) {\n                    this.webkitRequestFullscreen();\n                } else if(this.msRequestFullscreen) {\n                    this.msRequestFullscreen();\n                }\n            });\n        }\n\n        this.setupShaders('left');\n    }\n\n        /**\n     * element created callback\n     * @private\n     */\n    createdCallback() {\n        this.setProperties();\n        this.parseAttributes();\n    };\n\n    /**\n     * element detached callback\n     * @private\n     */\n    detachedCallback() {};\n\n    /**\n     * attributeChangedCallback\n     * @private\n     * @param {String} attr attribute changed\n     * @param {*} oldVal old value\n     * @param {*} newVal new value\n     */\n    attributeChangedCallback(attr, oldVal, newVal) {};\n\n    /**\n     * sync right to left\n     * @param event\n     */\n    syncRighttoLeft(event) {\n        this.dom.rightCanvas.width = event.detail.width;\n        this.dom.rightCanvas.height = event.detail.height;\n        this.dom.rightCanvasContext.putImageData(\n            event.detail.framedata,\n            event.detail.videoLeft,\n            event.detail.videoTop,\n            0, 0,\n            event.detail.videoWidth,\n            event.detail.videoHeight);\n    }\n}","export default {\n  \"riftshader\": {\n    \"fragment\": \"precision mediump float;  uniform vec2 scale; uniform vec2 scaleIn; uniform vec2 lensCenter; uniform vec4 hmdWarpParam; uniform vec4 chromAbParam; uniform sampler2D texid; varying vec2 v_texCoord;  void main(void) {   vec2 uv = vec2(v_texCoord*2.0)-1.0;   vec2 theta = (uv-lensCenter)*scaleIn;   float rSq = theta.x*theta.x + theta.y*theta.y;   vec2 rvector = theta*(hmdWarpParam.x + hmdWarpParam.y*rSq + hmdWarpParam.z*rSq*rSq + hmdWarpParam.w*rSq*rSq*rSq);   vec2 rBlue = rvector * (chromAbParam.z + chromAbParam.w * rSq);   vec2 tcBlue = (lensCenter + scale * rBlue);   tcBlue = (tcBlue+1.0)/2.0;    if (any(bvec2(clamp(tcBlue, vec2(0.0,0.0), vec2(1.0,1.0))-tcBlue))) {     gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);     return;   }    vec2 tcGreen = lensCenter + scale * rvector;   tcGreen = (tcGreen+1.0)/2.0;   vec2 rRed = rvector * (chromAbParam.x + chromAbParam.y * rSq);   vec2 tcRed = lensCenter + scale * rRed;   tcRed = (tcRed+1.0)/2.0;   gl_FragColor = vec4(texture2D(texid, tcRed).r, texture2D(texid, tcGreen).g, texture2D(texid, tcBlue).b, 1); } \",\n    \"vertex\": \"attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }\"\n  }\n}"]}
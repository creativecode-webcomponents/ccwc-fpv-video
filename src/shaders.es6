export default {
  "riftshader": {
    "fragment": "precision mediump float;  uniform vec2 scale; uniform vec2 scaleIn; uniform vec2 lensCenter; uniform vec4 hmdWarpParam; uniform vec4 chromAbParam; uniform sampler2D texid; varying vec2 v_texCoord;  void main(void) {   vec2 uv = vec2(v_texCoord*2.0)-1.0;   vec2 theta = (uv-lensCenter)*scaleIn;   float rSq = theta.x*theta.x + theta.y*theta.y;   vec2 rvector = theta*(hmdWarpParam.x + hmdWarpParam.y*rSq + hmdWarpParam.z*rSq*rSq + hmdWarpParam.w*rSq*rSq*rSq);   vec2 rBlue = rvector * (chromAbParam.z + chromAbParam.w * rSq);   vec2 tcBlue = (lensCenter + scale * rBlue);   tcBlue = (tcBlue+1.0)/2.0;    if (any(bvec2(clamp(tcBlue, vec2(0.0,0.0), vec2(1.0,1.0))-tcBlue))) {     gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);     return;   }    vec2 tcGreen = lensCenter + scale * rvector;   tcGreen = (tcGreen+1.0)/2.0;   vec2 rRed = rvector * (chromAbParam.x + chromAbParam.y * rSq);   vec2 tcRed = lensCenter + scale * rRed;   tcRed = (tcRed+1.0)/2.0;   gl_FragColor = vec4(texture2D(texid, tcRed).r, texture2D(texid, tcGreen).g, texture2D(texid, tcBlue).b, 1); } ",
    "vertex": "attribute vec2 a_position; attribute vec2 a_texCoord; uniform vec2 u_resolution; varying vec2 v_texCoord;  void main() {     vec2 zeroToOne = a_position / u_resolution;     vec2 zeroToTwo = zeroToOne * 2.0;     vec2 clipSpace = zeroToTwo - 1.0;     gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);     v_texCoord = a_texCoord; }"
  }
}